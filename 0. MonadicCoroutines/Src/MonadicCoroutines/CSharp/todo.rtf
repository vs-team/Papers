{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf350
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww28220\viewh17120\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural

\f0\fs24 \cf0 Implementazioni:\
A. fibonacci concorrente\
B. molti fibonacci concorrenti\
C. accesso allo stato\
\
Fatte:\
- F# (A,B,C)\
- C# (A,B,C)\
- Python (A, B)\
- LUA (A,B,C)\
- C# tasklets\
\
Profiling:\
- library LOCs, tempo/#yields; LOCs\
- F# non tutta la monade, solo bind e return, (fib = 1.5x10\'886; 21, many_fibo = 1.2 x 10\'886; 21, ships = 1.6 x 10\'886; 35)\
- C# 247, (fib = 1.4 x 10\'886; 51, many_fib = 2.0 x 10\'886; 58, ships = 2.1 x 10\'886; 59)\
- Python 63, (fib = 1.0 x 10\'886; 24, many_fib = 1.0 x 10\'886; 29, ships = 0.7 x 10\'886; 48)\
- lua 89, (fib = 1.2 x 10\'886; 30, many_fib = 1.2 x 10\'886; 39, ships = 1.0 x 10\'886; 52)\
\
Tests di usabilit\'e0:\
- studenti devono realizzare A, B e C a gruppi di due in tutti i sistemi\
\
Architettura:\
- quanto si sposa la soluzione con le architetture correnti AAA e indie?\
\
Estensibilit\'e0:\
- l'implementazione deve essere meno ad-hoc possibile\
\
}