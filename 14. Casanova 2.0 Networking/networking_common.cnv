module Networking.Common


entity NetManager = {
  Peers         : List<NetPeer>
  Id            : PeerId

  MasterConnect : bool
  SlaveConnect  : bool

  rule Peers, SlaveConnect =
    wait_until (SlaveConnect = false)
    let new_connection = wait_some(NetPeer.NewConnection())
    yield Peers + new_connection, true

  rule Peers = 
    wait 5.0f<s>
    from p in Peers
    where p.Channel.Connected
    select p

  Create() =
    let peers = NetChannel.FindPeers()
    {
      Id            = from p in peers
                      max_by p.Id + 1
      Peers         = peers
      MasterConnect = true
      SlaveConnect  = false
    }
}


entity NetPeer = {
  Channel           : NetChannel
  Id                : PeerId
  ReceivedMessages  : List<InMessage>

  // Channel sends/receives automatically across the network to all other instances
  rule ReceivedMessages = yield Channel.ReceivedMessages
  rule Channel.ReliablySentMessages = 
    from (m:ReliableOutMessage) in *
    where exists(Id, m.Targets) || m.Targets = []
    select m
  rule Channel.SentMessages = 
    from (m:OutMessage) in *
    where exists(Id, m.Targets) || m.Targets = []
    select m
}


interface Message
  Sender          : PeerId
  ContentType     : TypeId
  OwnerEntity     : EntityId


interface OutMessage
  inherit Message
  Targets             : List<PeerId>
  member WriteInt     : int -> Unit
  member WriteFloat   : float32 -> Unit
  member WriteString  : string -> Unit
  member WriteT       : T -> Unit // only for elementary data-types


interface ReliableOutMessage
  inherit Message
  Targets             : List<PeerId>
  member WriteInt     : int -> Unit
  member WriteFloat   : float32 -> Unit
  member WriteString  : string -> Unit
  member WriteT       : T -> Unit // only for elementary data-types
  member Received     : bool
  member Failed       : bool


interface InMessage
  inherit Message
  member ReadInt     : Unit -> int
  member ReadFloat   : Unit -> float32
  member ReadString  : Unit -> string
  member ReadT       : Unit -> T // only for elementary data-types


 interface NetChannel
  member ReceivedMessages       : List<InMessage>
  member SentMessages           : List<OutMessage>
  member ReliablySentMessages   : List<ReliableOutMessage>
  static member FindPeers       : Unit -> List<NetPeer>

