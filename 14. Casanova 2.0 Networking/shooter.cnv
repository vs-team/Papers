world Lobby = {
  Self     : LobbyPlayer
  Others   : List<LobbyPlayer>

  local {
    connect{
      rule Self, Others =
        let others = receive_many<LobbyPlayer>()
        let max_x = 
          maxby p in others
          select p.StartPosition.X
        let start_position = Vector2(max_x + 5.0f<pixel>, 0.0f<pixel>)
        let self = { Self with Position = start_position }
        yield +send_reliable<LobbyPlayer>(self), others
    }
  }

  remote {
    connect {
      rule Others =
        send_reliable<LobbyPlayer>(Self)
        let new_player = receive<LobbyPlayer>()
        yield Others + new_player
    }
  }

  rule CurrentWorld = 
    wait_until(Self.Ready)
    wait_until(forall p in Others
               select p.Ready)
    yield Arena.Create(Self)

  Create(own_name) = {
    Self   = Players.Create(own_name, Vector2.Zero)
    Others = []
  }
}

entity LobbyPlayer = {
  Name            : string
  Ready           : bool
  StartPosition   : Vector2<pixel>

  local {
    rule Ready = 
      wait_until(IsKeyDown(Enter))
      yield+send_reliable<bool> true

    rule Ready = 
      wait(30.0f<s>)
      yield+send_reliable<bool> true
  }

  remote {
    rule Ready = 
      yield receive<bool>()
  }

  Create(name, p) = 
    {
      Name          = name
      Ready         = false
      StartPosition = p
    }
}





world Arena = {
  Self		: Ship
  Others	: List<Ship>

  local {
    connect {
      rule Others = 
      	send_reliable<Ship>(Self)
      	yield receive_many<Ship>
    }
  }

  remote {
    connect {
      rule Others = 
      	let new_other = receive<Ship>()
      	send_reliable<Ship>(Self)
      	yield Others + new_other
    }
  }

  Create(self:LobbyPlayer) =
    {
      Self    = Ship.Create(self.StartPosition)
      Others  = []
    }
}


entity Ship = {
  Position    : Vector2<pixel>
  Velocity    : Vector2<pixel/s>
  Health      : float<health>
  Shots       : List<Projectile>
  Hits        : List<Ref<Ship>>

  local {
    rule Position = 
      yield+send<Vector2<pixel>> Position + Velocity * dt
    rule Velocity = 
      ... input-specific code
      yield+send<Vector2<pixel>> ...
    rule Health = 
      yield+send<float<health>>(
        Health - from o in world.Others
                 from h in o.Hits
                 where h = Self
                 select 1
                 sum)
    rule Shots = 
      ... input-specific code
      let new_shot = ...
      send<Projectile>(new_shot)
      yield new_shot + Shots
    rule Hits,Shots = 
      ... partition Shots into shots and hits
      let hits',shots' = ... 
      send_reliable<List<Hits>>(hits')
      yield hits', shots'
  }

  remote {
    rule Position = yield receive<Vector2<pixel>>()
    rule Velocity = yield receive<Vector2<pixel/s>>()
    rule Health = yield receive<float<health>>()
    rule Shots = 
      let new_shot = receive<Projectile>()
      yield new_shot + Shots
    rule Hits = 
      yield receive<List<Hits>>()
      yield []
  }

  rule Shots = 
    from s in Shots
    where s.Active
    select s

  Create(p) =
    {
      Position = p
      Velocity = Vector2.Zero
      Health   = 100.0<health>
      Shots    = []
      Hits     = []
    }
}

entity Projectile = {
  Position    : Vector2<pixel>
  Velocity    : Vector2<pixel/s>
  Active      : bool
  rule Position = Position + Velocity * dt

  local {
    rule Position = 
      wait 5.0<s>
      send<Vector2<pixel>>(Position)
    rule Velocity =
      wait 10.0<s>
      send<Vector2<pixel/s>>(Velocity)
    rule Active =
      wait 20.0<s>
      yield+send_reliable<bool> false
  }
  remote {
    rule Position = 
      yield receive<Vector2<pixel>>()
    rule Velocity =
      yield receive<Vector2<pixel/s>>()
    rule Active =
      yield receive<bool>()
  }

  Create(p,v) =
    {
      Position = p
      Velocity = v
      Active   = true
    }
}
