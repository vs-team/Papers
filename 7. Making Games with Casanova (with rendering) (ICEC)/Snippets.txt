(i) defining a player avatar, handling his input and his shooting; (ii) spawning obstacles randomly; (iii) handling collisions between projectiles and obstacles; (iv) representing the properties of a static map (cave) divided in rooms and cells; (v) handling monsters and their AI (albeit a rudimentary one); (vi) active entities such as bases or buildings that produce units; (vii) selection-based input mechanisms.

Avatar:

type World = {
  Sprites         : SpriteLayer
  UI              : SpriteLayer
  Asteroids       : var<list<Asteroid>>
  Projectiles     : var<list<Projectile>>
  Cannon          : Cannon }
  rule Asteroids(world,dt) = 
    [a | a <- state.Asteroids && a.Colliders.Length = 0 && a.Position.Y < 100.0<m>]
  rule Projectiles(world,dt) = 
    [p | p <- state.Projectiles && p.Colliders.Length = 0 && p.Position.Y > 0.0<m>]


type Cannon = {
  Sprite          : DrawableSprite
  Angle           : float<rad>
  MoveLeft        : var<bool>
  MoveRight       : var<bool> }
  rule Angle(world,self,dt) = 
    self.Angle + if self.MoveLeft then dt elif self.MoveRight then -dt else 0.0<rad>
  rule MoveLeft(world,self,dt) = false
  rule MoveRight(world,self,dt) = false 
  rule Sprite.Rotation(world,self,dt) = self.Angle

  { return is_key_down Keys.Left } => { state.Cannon.MoveLeft := true },
  { return is_key_down Keys.Right } => { state.Cannon.MoveRight := true }


Shooting:

  { if is_key_down Keys.Space then return Some() else return None } => {
      state.Projectiles.Add
        { Sprite   = { Path   = "projectile.jpg"
                       Layer = world.Sprites }
          Position = vector(50.0<, 0.)
          Velocity = vector2(cos(state.CannonAngle),sin(state.CannonAngle))
          Colliders = [] }
      wait 0.1<s> }


Spawning:

  repeat {
      wait (random(1.0<s>,3.0<s>))
      state.Asteroids.Add …
  }


Collisions:

type Asteroid = 
  …
  rule Colliders(world,self,dt) = 
    [x | x <- get_colliders world && distance(self.Position, x.Position) < 10.0f]



Room:

type Room = {
    Cells             : list<list<Cell>>
    Monsters          : list<Monster> }
rule Monsters(world,self,dt) = [m | m <- self.Monsters && m.Health > 0]

type Cell = {
    Position      : Vector2<m>
    Sprite        : DrawableSprite
    Room          : ref<Room>
    HasPlayer     : bool
    Monsters      : list<ref<Monster>>
    Door          : Option<ref<Room>>
    Neighbours    : list<ref<Cell>> }
rule HasPlayer(world,self,dt) = world.Player.Position = self
rule Monsters(world, self, dt) = 
  [m | m <- world.CurrentRoom.Monsters && m.Health > 0 && m.Position = self]


Monster:
type Monster = {
    Position        : var<ref<Cell>>
    Sprite          : DrawableSprite
    Health          : int
    Damage          : var<int>
    MoveTarget      : var<ref<Option<Cell>>
    PositionDelta   : Vector2 }
member Movement(world,self,dt,on_arrived,on_moving) =
  match self.MoveTarget with
  | Some target ->
    if distance(self.Position.Position + self.PositionDelta, target.Position) < 0.1 then
      on_arrived target
    else on_moving()
  | None -> on_moving()
rule Health(world,self,dt) =
  if self.Position.HasPlayer && world.UpdateNow then
    self.Health - world.Player.Damage * random(1,4)
  else self.Health
rule Position(world,self,dt) =
  Movement(world,self,dt,id,fun () -> self.Position)
rule MoveTarget(world,self,dt) =
  Movement(world,self,dt,fun () -> None,fun () -> self.MoveTarget)
rule PositionDelta(world,self,dt) =
  Movement(world,self,dt,
 fun () -> self.PositionDelta + dt * normalize(target.Position - self.Position.Position),
 fun () -> self.PositionDelta)
rule Sprite.Position(world,self,dt) = self.Position.Position + self.PositionDelta

  let monster_AI (monster : Monster) =
    repeat {
        if monster.Health > 0 then
          if world.UpdateNow && random(0, 20) < 1 && monster.MoveTarget = None then
            let target_cell = …
            do monster.MoveTarget := Some target_cell) }
    || { wait_condition (fun () -> world.CurrentRoom <> monster.Position.Room)


Active entities:

type World = {
  Sprites         : SpriteLayer
  UI              : SpriteLayer
  Planets         : list<Planet>
  Fleets          : var<list<Fleet>>
  TickBattles     : var<bool>
  SourcePlanet    : var<Option<ref<Planet>>> }
rule Fleets(world,dt) = 
  [f | f <- self.Fleets && f.Alive && (not(f.Arrived) || f.Fighting)]

type Planet = {
  Owner             : Player
  Armies            : var<int<Ship>>
  FractionalArmies  : float<Ship>
  AttackingFleets   : list<ref<Fleet>>
  ReinforcingFleets : list<ref<Fleet>>
  … }
rule Owner(world,self,dt) =
    if self.Armies <= 0 && self.AttackingFleets.Length > 0 then 
      self.AttackingFleets[0].Owner
    else self.Owner
rule Armies(world,self,dt) =
  if self.Armies <= 0 then
    sum [a.Armies | a <- self.AttackingFleets && a.Owner = self.AtackingFleets[0].Owner]
  else
    let damages = sum[random(1,3) | f <- self.AttackingFleets] * state.TickBattles
    let reinforcements = sum[f.Armies | f <- self.ReinforcingFleets]
    self.Armies + int(self.FractionalArmies) - damages + reinforcements
rule FractionalArmies(world,self,dt) =
  self.FractionalArmies + (dt * self.Production) - floor(self.FractionalArmies)
rule AttackingFleets(world,self,dt) = 
  [f : f <- state.Fleets && f.Target = self && f.Owner <> self.Owner && f.Arrived]
rule ReinforcingFleets(world,self,dt) = 
  [f : f <- state.Fleets && f.Target = self && f.Owner = self.Owner && f.Arrived]


Selection:

  { return mouse_clicked_left() } => {
      let mouse = mouse_position()
      let clicked = 
         [p | p <- world.Planets && distance(p.Position,mouse) < 10.0 && p.Owner = Human]
      if clicked <> [] then return Some(clicked.Head)
      else return None } => fun p -> { world.SourcePlanet := Some(p) },


  { return mouse_clicked_right() && world.SourcePlanet <> None } => {
      let mouse = mouse_position()
      let clicked = [p | p <- world.Planets && distance(p.Position,mouse) < 10.0]
      if clicked <> [] then return Some(clicked.[0],world.SourcePlanet.Value)
      else return None } => fun (source,target) -> { mk_fleet source target }
